---
export interface Props {
  images: string[]
}

const { images } = Astro.props
---
<div class="carousel">
    <div class="slides" id="slides">
        {images.map((src) => (
        <div class="slide">
            <img src={src} alt="Carousel image" />
        </div>
        ))}
    </div>
    <button class="button prev" id="prev">‹</button>
    <button class="button next" id="next">›</button>
</div>


<style>
    .carousel {
        position: relative;
        overflow: hidden;
        width: 100%;
        max-width: 600px;
        margin: auto;
    }

    .slides {
        display: flex;
        transition: transform 0.5s ease-in-out;
        will-change: transform;
    }

    .slide {
        min-width: 100%;
        user-select: none;
    }

    .slide img {
        display: block;
        width: 100%;
        height: auto;
    }

    .button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255,255,255,0.7);
        border: none;
        padding: 0.5em;
        cursor: pointer;
        font-size: 1.2em;
    }

    .button.prev {
        left: 0.5em;
    }

    .button.next {
        right: 0.5em;
    }
</style>

<script>
    const slides = document.getElementById('slides') as HTMLElement;
    const prevBtn = document.getElementById('prev') as HTMLButtonElement;
    const nextBtn = document.getElementById('next') as HTMLButtonElement;
    const total = slides.children.length;
    let index = 0;

    function update() {
        slides.style.transform = `translateX(-${index * 100}%)`;
    }

    prevBtn.addEventListener('click', () => {
        index = (index - 1 + total) % total;
        update();
    });

    nextBtn.addEventListener('click', () => {
        index = (index + 1) % total;
        update();
    });
</script>
